// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/blockchain/msgs.proto

package blockchain

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/tendermint/tendermint/proto/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BcBlockRequestMessage struct {
	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *BcBlockRequestMessage) Reset()         { *m = BcBlockRequestMessage{} }
func (m *BcBlockRequestMessage) String() string { return proto.CompactTextString(m) }
func (*BcBlockRequestMessage) ProtoMessage()    {}
func (*BcBlockRequestMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecf660069f8bb334, []int{0}
}
func (m *BcBlockRequestMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BcBlockRequestMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BcBlockRequestMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BcBlockRequestMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BcBlockRequestMessage.Merge(m, src)
}
func (m *BcBlockRequestMessage) XXX_Size() int {
	return m.Size()
}
func (m *BcBlockRequestMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BcBlockRequestMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BcBlockRequestMessage proto.InternalMessageInfo

func (m *BcBlockRequestMessage) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type BcNoBlockResponseMessage struct {
	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *BcNoBlockResponseMessage) Reset()         { *m = BcNoBlockResponseMessage{} }
func (m *BcNoBlockResponseMessage) String() string { return proto.CompactTextString(m) }
func (*BcNoBlockResponseMessage) ProtoMessage()    {}
func (*BcNoBlockResponseMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecf660069f8bb334, []int{1}
}
func (m *BcNoBlockResponseMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BcNoBlockResponseMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BcNoBlockResponseMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BcNoBlockResponseMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BcNoBlockResponseMessage.Merge(m, src)
}
func (m *BcNoBlockResponseMessage) XXX_Size() int {
	return m.Size()
}
func (m *BcNoBlockResponseMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BcNoBlockResponseMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BcNoBlockResponseMessage proto.InternalMessageInfo

func (m *BcNoBlockResponseMessage) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type BcBlockResponseMessage struct {
	Block *types.Block `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *BcBlockResponseMessage) Reset()         { *m = BcBlockResponseMessage{} }
func (m *BcBlockResponseMessage) String() string { return proto.CompactTextString(m) }
func (*BcBlockResponseMessage) ProtoMessage()    {}
func (*BcBlockResponseMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecf660069f8bb334, []int{2}
}
func (m *BcBlockResponseMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BcBlockResponseMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BcBlockResponseMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BcBlockResponseMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BcBlockResponseMessage.Merge(m, src)
}
func (m *BcBlockResponseMessage) XXX_Size() int {
	return m.Size()
}
func (m *BcBlockResponseMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BcBlockResponseMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BcBlockResponseMessage proto.InternalMessageInfo

func (m *BcBlockResponseMessage) GetBlock() *types.Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type BcStatusRequestMessage struct {
	Height int64 `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
}

func (m *BcStatusRequestMessage) Reset()         { *m = BcStatusRequestMessage{} }
func (m *BcStatusRequestMessage) String() string { return proto.CompactTextString(m) }
func (*BcStatusRequestMessage) ProtoMessage()    {}
func (*BcStatusRequestMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecf660069f8bb334, []int{3}
}
func (m *BcStatusRequestMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BcStatusRequestMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BcStatusRequestMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BcStatusRequestMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BcStatusRequestMessage.Merge(m, src)
}
func (m *BcStatusRequestMessage) XXX_Size() int {
	return m.Size()
}
func (m *BcStatusRequestMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BcStatusRequestMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BcStatusRequestMessage proto.InternalMessageInfo

func (m *BcStatusRequestMessage) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type BcStatusResponseMessage struct {
	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *BcStatusResponseMessage) Reset()         { *m = BcStatusResponseMessage{} }
func (m *BcStatusResponseMessage) String() string { return proto.CompactTextString(m) }
func (*BcStatusResponseMessage) ProtoMessage()    {}
func (*BcStatusResponseMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecf660069f8bb334, []int{4}
}
func (m *BcStatusResponseMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BcStatusResponseMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BcStatusResponseMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BcStatusResponseMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BcStatusResponseMessage.Merge(m, src)
}
func (m *BcStatusResponseMessage) XXX_Size() int {
	return m.Size()
}
func (m *BcStatusResponseMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BcStatusResponseMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BcStatusResponseMessage proto.InternalMessageInfo

func (m *BcStatusResponseMessage) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type BlockchainMessage struct {
	// Types that are valid to be assigned to Sum:
	//	*BlockchainMessage_BlockRequest
	//	*BlockchainMessage_NoBlockResponse
	//	*BlockchainMessage_BlockResponse
	//	*BlockchainMessage_StatusRequest
	//	*BlockchainMessage_StatusResponse
	Sum isBlockchainMessage_Sum `protobuf_oneof:"sum"`
}

func (m *BlockchainMessage) Reset()         { *m = BlockchainMessage{} }
func (m *BlockchainMessage) String() string { return proto.CompactTextString(m) }
func (*BlockchainMessage) ProtoMessage()    {}
func (*BlockchainMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_ecf660069f8bb334, []int{5}
}
func (m *BlockchainMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockchainMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockchainMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockchainMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockchainMessage.Merge(m, src)
}
func (m *BlockchainMessage) XXX_Size() int {
	return m.Size()
}
func (m *BlockchainMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockchainMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BlockchainMessage proto.InternalMessageInfo

type isBlockchainMessage_Sum interface {
	isBlockchainMessage_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type BlockchainMessage_BlockRequest struct {
	BlockRequest *BcBlockRequestMessage `protobuf:"bytes,1,opt,name=block_request,json=blockRequest,proto3,oneof" json:"block_request,omitempty"`
}
type BlockchainMessage_NoBlockResponse struct {
	NoBlockResponse *BcNoBlockResponseMessage `protobuf:"bytes,2,opt,name=no_block_response,json=noBlockResponse,proto3,oneof" json:"no_block_response,omitempty"`
}
type BlockchainMessage_BlockResponse struct {
	BlockResponse *BcBlockResponseMessage `protobuf:"bytes,3,opt,name=block_response,json=blockResponse,proto3,oneof" json:"block_response,omitempty"`
}
type BlockchainMessage_StatusRequest struct {
	StatusRequest *BcStatusRequestMessage `protobuf:"bytes,4,opt,name=status_request,json=statusRequest,proto3,oneof" json:"status_request,omitempty"`
}
type BlockchainMessage_StatusResponse struct {
	StatusResponse *BcStatusResponseMessage `protobuf:"bytes,5,opt,name=status_response,json=statusResponse,proto3,oneof" json:"status_response,omitempty"`
}

func (*BlockchainMessage_BlockRequest) isBlockchainMessage_Sum()    {}
func (*BlockchainMessage_NoBlockResponse) isBlockchainMessage_Sum() {}
func (*BlockchainMessage_BlockResponse) isBlockchainMessage_Sum()   {}
func (*BlockchainMessage_StatusRequest) isBlockchainMessage_Sum()   {}
func (*BlockchainMessage_StatusResponse) isBlockchainMessage_Sum()  {}

func (m *BlockchainMessage) GetSum() isBlockchainMessage_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *BlockchainMessage) GetBlockRequest() *BcBlockRequestMessage {
	if x, ok := m.GetSum().(*BlockchainMessage_BlockRequest); ok {
		return x.BlockRequest
	}
	return nil
}

func (m *BlockchainMessage) GetNoBlockResponse() *BcNoBlockResponseMessage {
	if x, ok := m.GetSum().(*BlockchainMessage_NoBlockResponse); ok {
		return x.NoBlockResponse
	}
	return nil
}

func (m *BlockchainMessage) GetBlockResponse() *BcBlockResponseMessage {
	if x, ok := m.GetSum().(*BlockchainMessage_BlockResponse); ok {
		return x.BlockResponse
	}
	return nil
}

func (m *BlockchainMessage) GetStatusRequest() *BcStatusRequestMessage {
	if x, ok := m.GetSum().(*BlockchainMessage_StatusRequest); ok {
		return x.StatusRequest
	}
	return nil
}

func (m *BlockchainMessage) GetStatusResponse() *BcStatusResponseMessage {
	if x, ok := m.GetSum().(*BlockchainMessage_StatusResponse); ok {
		return x.StatusResponse
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BlockchainMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BlockchainMessage_BlockRequest)(nil),
		(*BlockchainMessage_NoBlockResponse)(nil),
		(*BlockchainMessage_BlockResponse)(nil),
		(*BlockchainMessage_StatusRequest)(nil),
		(*BlockchainMessage_StatusResponse)(nil),
	}
}

func init() {
	proto.RegisterType((*BcBlockRequestMessage)(nil), "tendermint.proto.blockchain.BcBlockRequestMessage")
	proto.RegisterType((*BcNoBlockResponseMessage)(nil), "tendermint.proto.blockchain.BcNoBlockResponseMessage")
	proto.RegisterType((*BcBlockResponseMessage)(nil), "tendermint.proto.blockchain.BcBlockResponseMessage")
	proto.RegisterType((*BcStatusRequestMessage)(nil), "tendermint.proto.blockchain.BcStatusRequestMessage")
	proto.RegisterType((*BcStatusResponseMessage)(nil), "tendermint.proto.blockchain.BcStatusResponseMessage")
	proto.RegisterType((*BlockchainMessage)(nil), "tendermint.proto.blockchain.BlockchainMessage")
}

func init() { proto.RegisterFile("proto/blockchain/msgs.proto", fileDescriptor_ecf660069f8bb334) }

var fileDescriptor_ecf660069f8bb334 = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x86, 0x5b, 0x2b, 0x1c, 0x46, 0x81, 0xd0, 0x44, 0x20, 0x12, 0x1b, 0xd3, 0x93, 0xa7, 0x56,
	0x40, 0x5f, 0xa0, 0x27, 0x12, 0x83, 0x87, 0x7a, 0xd2, 0x98, 0x10, 0x5a, 0x37, 0x6d, 0xa3, 0xdd,
	0x45, 0x66, 0x7b, 0xf0, 0x2d, 0x7c, 0x2c, 0x8f, 0x1c, 0x3d, 0x1a, 0x78, 0x08, 0xaf, 0x86, 0xdd,
	0x52, 0x68, 0x21, 0xd2, 0x4b, 0xd3, 0x9d, 0x9d, 0xff, 0x9b, 0x7f, 0xff, 0xcd, 0x42, 0x77, 0x3a,
	0x63, 0x9c, 0xd9, 0xde, 0x1b, 0xf3, 0x5f, 0xfd, 0x70, 0x12, 0x51, 0x3b, 0xc6, 0x00, 0x2d, 0x51,
	0xd5, 0xbb, 0x9c, 0xd0, 0x17, 0x32, 0x8b, 0x23, 0xca, 0x65, 0xc5, 0xda, 0xf4, 0x9d, 0xb7, 0xa5,
	0x92, 0x7f, 0x4c, 0x09, 0xca, 0xaf, 0xec, 0x31, 0x6d, 0x38, 0x73, 0x7c, 0x67, 0xd5, 0xe8, 0x92,
	0xf7, 0x84, 0x20, 0x1f, 0x11, 0xc4, 0x49, 0x40, 0xf4, 0x16, 0x54, 0x43, 0x12, 0x05, 0x21, 0xef,
	0xa8, 0x97, 0xea, 0x95, 0xe6, 0xa6, 0x2b, 0xb3, 0x0f, 0x1d, 0xc7, 0xbf, 0x67, 0xa9, 0x04, 0xa7,
	0x8c, 0x22, 0x39, 0xa4, 0x19, 0x41, 0x2b, 0x1b, 0x92, 0x57, 0x0c, 0xa0, 0x22, 0x5c, 0x0a, 0xc1,
	0x49, 0xff, 0xc2, 0xda, 0x39, 0x84, 0x34, 0x2b, 0xc5, 0xb2, 0xd7, 0xbc, 0x5e, 0xe1, 0x1e, 0xf8,
	0x84, 0x27, 0xb8, 0x6b, 0x7a, 0x98, 0x33, 0x20, 0x57, 0x66, 0x0f, 0xda, 0x1b, 0x45, 0x39, 0xcf,
	0xbf, 0x1a, 0x34, 0x9d, 0x2c, 0xc0, 0x75, 0xf7, 0x23, 0xd4, 0x84, 0x87, 0xf1, 0x4c, 0x0e, 0x4e,
	0x7d, 0xf7, 0xad, 0x7f, 0xc2, 0xb7, 0xf6, 0x06, 0x3c, 0x54, 0xdc, 0x53, 0x6f, 0xab, 0xac, 0xfb,
	0xd0, 0xa4, 0x6c, 0xbc, 0xa6, 0x4b, 0x93, 0x9d, 0x23, 0x81, 0xbf, 0x3d, 0x80, 0xdf, 0x7f, 0x1d,
	0x43, 0xc5, 0x6d, 0xd0, 0xfc, 0x8e, 0xfe, 0x0c, 0xf5, 0xc2, 0x04, 0x4d, 0x4c, 0x18, 0x94, 0x3b,
	0x40, 0x91, 0x5f, 0xf3, 0x8a, 0x74, 0x14, 0x21, 0x67, 0xf1, 0x1c, 0x97, 0xa2, 0xef, 0xbb, 0xcb,
	0x15, 0x1d, 0xb7, 0xeb, 0xfa, 0x18, 0x1a, 0x19, 0x3d, 0x35, 0x5f, 0x11, 0xf8, 0x9b, 0x92, 0xf8,
	0xa2, 0xfb, 0x3a, 0xe6, 0x36, 0x9c, 0x0a, 0x68, 0x98, 0xc4, 0xce, 0xdd, 0xd7, 0xc2, 0x50, 0xe7,
	0x0b, 0x43, 0xfd, 0x59, 0x18, 0xea, 0xe7, 0xd2, 0x50, 0xe6, 0x4b, 0x43, 0xf9, 0x5e, 0x1a, 0xca,
	0x53, 0x2f, 0x88, 0x78, 0x98, 0x78, 0x96, 0xcf, 0x62, 0x7b, 0x33, 0x72, 0xfb, 0xb7, 0xf8, 0x40,
	0xbd, 0xaa, 0xa8, 0x0c, 0xfe, 0x02, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x1f, 0x5a, 0xf1, 0xbb, 0x03,
	0x00, 0x00,
}

func (m *BcBlockRequestMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BcBlockRequestMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BcBlockRequestMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BcNoBlockResponseMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BcNoBlockResponseMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BcNoBlockResponseMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BcBlockResponseMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BcBlockResponseMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BcBlockResponseMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BcStatusRequestMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BcStatusRequestMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BcStatusRequestMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BcStatusResponseMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BcStatusResponseMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BcStatusResponseMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockchainMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockchainMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockchainMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *BlockchainMessage_BlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockchainMessage_BlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockRequest != nil {
		{
			size, err := m.BlockRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *BlockchainMessage_NoBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockchainMessage_NoBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoBlockResponse != nil {
		{
			size, err := m.NoBlockResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *BlockchainMessage_BlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockchainMessage_BlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BlockResponse != nil {
		{
			size, err := m.BlockResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *BlockchainMessage_StatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockchainMessage_StatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StatusRequest != nil {
		{
			size, err := m.StatusRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *BlockchainMessage_StatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockchainMessage_StatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StatusResponse != nil {
		{
			size, err := m.StatusResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func encodeVarintMsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BcBlockRequestMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovMsgs(uint64(m.Height))
	}
	return n
}

func (m *BcNoBlockResponseMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovMsgs(uint64(m.Height))
	}
	return n
}

func (m *BcBlockResponseMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *BcStatusRequestMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovMsgs(uint64(m.Height))
	}
	return n
}

func (m *BcStatusResponseMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovMsgs(uint64(m.Height))
	}
	return n
}

func (m *BlockchainMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *BlockchainMessage_BlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockRequest != nil {
		l = m.BlockRequest.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}
func (m *BlockchainMessage_NoBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoBlockResponse != nil {
		l = m.NoBlockResponse.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}
func (m *BlockchainMessage_BlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockResponse != nil {
		l = m.BlockResponse.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}
func (m *BlockchainMessage_StatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatusRequest != nil {
		l = m.StatusRequest.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}
func (m *BlockchainMessage_StatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatusResponse != nil {
		l = m.StatusResponse.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func sovMsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgs(x uint64) (n int) {
	return sovMsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BcBlockRequestMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BcBlockRequestMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BcBlockRequestMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BcNoBlockResponseMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BcNoBlockResponseMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BcNoBlockResponseMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BcBlockResponseMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BcBlockResponseMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BcBlockResponseMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &types.Block{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BcStatusRequestMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BcStatusRequestMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BcStatusRequestMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BcStatusResponseMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BcStatusResponseMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BcStatusResponseMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockchainMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockchainMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockchainMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BcBlockRequestMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &BlockchainMessage_BlockRequest{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoBlockResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BcNoBlockResponseMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &BlockchainMessage_NoBlockResponse{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BcBlockResponseMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &BlockchainMessage_BlockResponse{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BcStatusRequestMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &BlockchainMessage_StatusRequest{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BcStatusResponseMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &BlockchainMessage_StatusResponse{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgs = fmt.Errorf("proto: unexpected end of group")
)
